---
thebelab-kernel: ir
---

# Configuring thebelab

## Change the HTML selector to mark interactive cells

By default, `sphinx-thebelab` will be run on any cells with the `thebelab` class.
However, you can customize the HTML selector to use other classes, elements, etc.

For example, if you wanted to convert **all code cells**, you could use the following
selector:

```python
thebelab_config = {
   "selector": "div.highlight"
}
```

```{note}
`sphinx-thebelab` will subsequently look for any `pre` blocks inside of elements it
finds with the `selector` configuration value. These are the blocks that will be
converted to interactive with `thebelab`.
```

## Including outputs with your code

If you'd like to include outputs in the *static* version of your page, and only
overwrite them once the user has run that Thebelab cell, you can configure `sphinx-thebelab`
to detect and keep the outputs associated with some code. To do so, use
the `selector-output` configuration. This is a selector that is searched for *within* any
items discovered by `selector`. If an output is found, it will be placed just after the
code and Thebelab will detect it.

For example, the following code:

`````
````{container} thebelab
```{code-block} r
print("hi")
```

```{container} output
"hi"
```
````
`````

Defines a *parent container* in which we'll put both code and the output of the
code. We'll use a `code-block` for the code, and another `container` node with our
`output` class for the output. `sphinx-gallery` will detect the parent container because
it has a `thebelab` class. It will detect the `pre` block inside the container as the
code, and it will detect the `<div>` block with the `output` class as the output.

The result is that initializing Thebelab *retains* the output until the cell is
executed, like so:

```{thebelab-button}
```

````{container} thebelab
```{code-block} r
print("hi")
```

```{container} output
"hi"
```
````

## Setting the Kernel

You can set the kernel that Thebelab uses on a page by adding metadata to your
page. To do so, add the following metadata to the top of your page:

```
thebelab-kernel: <kernel-name>
```

For example, this page had the following metadata in it:

```
thebelab-kernel: ir
```

In addition, this website is configured to use the [Binder R example repository](https://github.com/binder-examples/r)
for its environment. As a result, we can now run R code interactively with Thebelab:


```{thebelab-button}
```

```{code-block}
:class: thebelab, thebelab-init

# ggplot2 examples
library(ggplot2)

# create factors with value labels
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),
  	labels=c("3gears","4gears","5gears"))
mtcars$am <- factor(mtcars$am,levels=c(0,1),
  	labels=c("Automatic","Manual"))
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
   labels=c("4cyl","6cyl","8cyl"))
```

```{code-block}
:class: thebelab, thebelab-init
# Kernel density plots for mpg
# grouped by number of gears (indicated by color)
qplot(mpg, data=mtcars, geom="density", fill=gear, alpha=I(.5),
   main="Distribution of Gas Milage", xlab="Miles Per Gallon",
   ylab="Density")
```

```{code-block}
:class: thebelab

# Scatterplot of mpg vs. hp for each combination of gears and cylinders
# in each facet, transmittion type is represented by shape and color
qplot(hp, mpg, data=mtcars, shape=am, color=am,
   facets=gear~cyl, size=I(3),
   xlab="Horsepower", ylab="Miles per Gallon")
```

## Automatically running some code

You can tag code blocks to run as soon as the kernel is ready (i.e., without any user input)
by adding the `thebelab-init` class to the code blocks. For example:

````
```{code-block}
:class: thebelab, thebelab-init
print("hi")
```
````

These code blocks will be run automatically once the kernel is ready, and their outputs
will be displayed below.


(add-custom-button)=
## Adding your own button to start Thebelab

By default, Thebelab encourages users to use the `thebelab-button` directive to
insert a thebelab button into their documentation. However, you can add your own
buttons wherever you wish. Simply ensure that an HTML element has this attribute:

```
onclick="initThebelab()"
```

and it will be able to initialize Thebelab on that page on its own.

For example, here is the HTML for the Thebelab button generated by the `thebelab-button`
directive:

```html
<button title="Make live" class="thebelab-button" onclick="initThebelab()">
  Make live
</button>
```
